const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://zhwmzlqeiwaawzsrcbsd.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o configurada no arquivo .env');
  console.log('Para usar este script, adicione a chave de servi√ßo do Supabase no arquivo .env:');
  console.log('SUPABASE_SERVICE_ROLE_KEY=sua_chave_de_servico_aqui');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function resetarProtocolos10kPara23kCorrigido() {
  console.log('üöÄ Iniciando reset: 10k protocolos ‚Üí 23.096 protocolos (CORRIGIDO)...');
  
  try {
    // 1. Verificar situa√ß√£o atual
    console.log('üìä Verificando protocolos existentes...');
    const { data: protocolosExistentes, error: errorContagem } = await supabase
      .from('protocolos')
      .select('id, numero_protocolo', { count: 'exact' });
    
    if (errorContagem) {
      console.error('‚ùå Erro ao contar protocolos existentes:', errorContagem);
      return;
    }
    
    const totalExistentes = protocolosExistentes?.length || 0;
    console.log(`üìä Protocolos existentes: ${totalExistentes}`);
    
    if (totalExistentes > 0) {
      const primeiro = protocolosExistentes[0]?.numero_protocolo;
      const ultimo = protocolosExistentes[protocolosExistentes.length - 1]?.numero_protocolo;
      console.log(`üìä Primeiro protocolo: ${primeiro}`);
      console.log(`üìä √öltimo protocolo: ${ultimo}`);
    }
    
    // 2. Confirmar com o usu√°rio
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const resposta = await new Promise((resolve) => {
      rl.question(`‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° deletar ${totalExistentes} protocolos existentes e criar 23.096 novos. Digite 'CONFIRMO' para continuar: `, resolve);
    });
    
    rl.close();
    
    if (resposta !== 'CONFIRMO') {
      console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
      return;
    }
    
    // 3. Remover constraint que limita o n√∫mero de protocolos (se existir)
    console.log('üîß Removendo constraint de limite de protocolos...');
    const { error: errorDropConstraint } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE protocolos DROP CONSTRAINT IF EXISTS protocolos_numero_check;'
    });
    
    if (errorDropConstraint) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel remover a constraint automaticamente. Execute manualmente:');
      console.log('ALTER TABLE protocolos DROP CONSTRAINT IF EXISTS protocolos_numero_check;');
    } else {
      console.log('‚úÖ Constraint removida com sucesso');
    }
    
    // 4. Deletar todos os protocolos existentes
    console.log('üóëÔ∏è  Deletando protocolos existentes...');
    const { error: errorDelete } = await supabase
      .from('protocolos')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000');
    
    if (errorDelete) {
      console.error('‚ùå Erro ao deletar protocolos:', errorDelete);
      return;
    }
    
    console.log('‚úÖ Protocolos existentes deletados');
    
    // 5. Verificar se a limpeza funcionou
    const { data: aposLimpeza, error: errorAposLimpeza } = await supabase
      .from('protocolos')
      .select('id', { count: 'exact' });
    
    if (errorAposLimpeza) {
      console.error('‚ùå Erro ao verificar limpeza:', errorAposLimpeza);
      return;
    }
    
    console.log(`‚úÖ Limpeza confirmada: ${aposLimpeza?.length || 0} protocolos restantes`);
    
    // 6. Criar 23.096 novos protocolos em lotes otimizados
    console.log('üîÑ Criando 23.096 novos protocolos...');
    const totalProtocolos = 23096;
    const tamanhoLote = 2000; // Lotes maiores para melhor performance
    const lotes = Math.ceil(totalProtocolos / tamanhoLote);
    
    console.log(`üì¶ Processando ${lotes} lotes de ${tamanhoLote} protocolos cada...`);
    
    for (let lote = 0; lote < lotes; lote++) {
      const inicio = lote * tamanhoLote + 1;
      const fim = Math.min((lote + 1) * tamanhoLote, totalProtocolos);
      
      console.log(`üì¶ Lote ${lote + 1}/${lotes}: protocolos ${inicio} a ${fim}`);
      
      const protocolosLote = [];
      for (let i = inicio; i <= fim; i++) {
        protocolosLote.push({
          numero_protocolo: i, // Usando integer, n√£o string
          status: 'pendente',
          criado_em: new Date().toISOString(),
          atualizado_em: new Date().toISOString(),
          observacoes: null
        });
      }
      
      const { error: errorInsert } = await supabase
        .from('protocolos')
        .insert(protocolosLote);
      
      if (errorInsert) {
        console.error(`‚ùå Erro ao inserir lote ${lote + 1}:`, errorInsert);
        return;
      }
      
      console.log(`‚úÖ Lote ${lote + 1}/${lotes} inserido com sucesso`);
    }
    
    // 7. Verificar resultado final
    console.log('üîç Verificando resultado final...');
    const { data: protocolosFinais, error: errorFinal } = await supabase
      .from('protocolos')
      .select('id, numero_protocolo, status', { count: 'exact' });
    
    if (errorFinal) {
      console.error('‚ùå Erro ao verificar resultado:', errorFinal);
      return;
    }
    
    console.log('üìä RESULTADO FINAL:');
    console.log(`   Total de protocolos: ${protocolosFinais?.length || 0}`);
    console.log(`   Primeiro protocolo: ${protocolosFinais?.[0]?.numero_protocolo || 'N/A'}`);
    console.log(`   √öltimo protocolo: ${protocolosFinais?.[protocolosFinais.length - 1]?.numero_protocolo || 'N/A'}`);
    
    // 8. Verificar protocolos espec√≠ficos
    const { data: protocolo1 } = await supabase
      .from('protocolos')
      .select('id, numero_protocolo, status')
      .eq('numero_protocolo', 1)
      .single();
    
    const { data: protocolo23096 } = await supabase
      .from('protocolos')
      .select('id, numero_protocolo, status')
      .eq('numero_protocolo', 23096)
      .single();
    
    if (protocolo1) {
      console.log(`‚úÖ Protocolo 1 criado com sucesso (ID: ${protocolo1.id})`);
    } else {
      console.log('‚ùå Protocolo 1 n√£o encontrado');
    }
    
    if (protocolo23096) {
      console.log(`‚úÖ Protocolo 23096 criado com sucesso (ID: ${protocolo23096.id})`);
    } else {
      console.log('‚ùå Protocolo 23096 n√£o encontrado');
    }
    
    // 9. Verificar se h√° duplicatas
    const { data: duplicatas, error: errorDuplicatas } = await supabase
      .from('protocolos')
      .select('numero_protocolo')
      .order('numero_protocolo');
    
    if (errorDuplicatas) {
      console.error('‚ùå Erro ao verificar duplicatas:', errorDuplicatas);
    } else {
      const numeros = duplicatas?.map(p => p.numero_protocolo) || [];
      const numerosUnicos = [...new Set(numeros)];
      
      if (numeros.length === numerosUnicos.length) {
        console.log('‚úÖ Nenhuma duplicata encontrada');
      } else {
        console.log(`‚ùå Encontradas ${numeros.length - numerosUnicos.length} duplicatas!`);
      }
    }
    
    // 10. Verificar constraint unique
    const { data: totalRegistros } = await supabase
      .from('protocolos')
      .select('id', { count: 'exact' });
    
    const { data: numerosUnicos } = await supabase
      .from('protocolos')
      .select('numero_protocolo');
    
    const numerosUnicosCount = [...new Set(numerosUnicos?.map(p => p.numero_protocolo) || [])].length;
    
    console.log(`üìä Verifica√ß√£o da constraint unique:`);
    console.log(`   Total de registros: ${totalRegistros?.length || 0}`);
    console.log(`   N√∫meros √∫nicos: ${numerosUnicosCount}`);
    
    if (totalRegistros?.length === numerosUnicosCount) {
      console.log('‚úÖ Constraint unique funcionando corretamente');
    } else {
      console.log('‚ùå Problema com constraint unique');
    }
    
    console.log('üéâ Reset dos protocolos conclu√≠do com sucesso!');
    console.log(`üìà Migra√ß√£o: ${totalExistentes} ‚Üí 23.096 protocolos`);
    
  } catch (error) {
    console.error('‚ùå Erro durante o reset:', error);
  }
}

// Executar o script
resetarProtocolos10kPara23kCorrigido().then(() => {
  process.exit(0);
}).catch((error) => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
}); 